const axios = require('axios');
const dns = require('dns');
const crypto = require('crypto');
const cheerio = require('cheerio');

class VulnerabilityScanner {
    constructor(url) {
        this.url = url;
        this.results = [];
    }

    async scan(options) {
        try {
            const response = await axios.get(this.url, { timeout: 15000 });
            const $ = cheerio.load(response.data);
            
            // 1. Protocol Security
            if (this.url.startsWith('http://')) {
                this.results.push({
                    title: "Insecure Protocol",
                    description: "The website uses HTTP which is insecure and vulnerable to man-in-the-middle attacks.",
                    severity: "critical",
                    recommendation: "Migrate to HTTPS immediately.",
                    cve: "CVE-2015-5715"
                });
            } else {
                this.results.push({
                    title: "Secure Protocol",
                    description: "The website uses HTTPS which provides encryption in transit.",
                    severity: "low",
                    recommendation: "Maintain HTTPS configuration."
                });
            }

            // 2. Server Headers
            if (options.checkHeaders) {
                const serverHeader = response.headers['server'];
                if (serverHeader) {
                    this.results.push({
                        title: "Server Information Exposure",
                        description: `Server reveals specific software version: ${serverHeader}`,
                        severity: "medium",
                        recommendation: "Remove or obfuscate server header.",
                        cve: "CVE-2021-44228"
                    });
                }

                const xPoweredBy = response.headers['x-powered-by'];
                if (xPoweredBy) {
                    this.results.push({
                        title: "Technology Stack Exposure",
                        description: `X-Powered-By header reveals technology stack: ${xPoweredBy}`,
                        severity: "medium",
                        recommendation: "Remove X-Powered-By header."
                    });
                }
            }

            // 3. Content Security Policy
            if (options.checkCSP) {
                const cspHeader = response.headers['content-security-policy'];
                if (!cspHeader) {
                    this.results.push({
                        title: "Missing Content Security Policy",
                        description: "No Content-Security-Policy header found.",
                        severity: "high",
                        recommendation: "Implement a strict CSP header."
                    });
                } else {
                    this.results.push({
                        title: "Content Security Policy Present",
                        description: "Content-Security-Policy header is configured.",
                        severity: "low",
                        recommendation: "Ensure CSP includes necessary directives."
                    });
                }
            }

            // 4. SSL/TLS Configuration
            if (options.checkSSL) {
                try {
                    const sslResponse = await axios.get(`${this.url.replace(/^http/, 'https')}`, { timeout: 10000 });
                    this.results.push({
                        title: "SSL/TLS Configuration",
                        description: "HTTPS connection established successfully.",
                        severity: "low",
                        recommendation: "Maintain valid SSL certificate."
                    });
                } catch (sslError) {
                    this.results.push({
                        title: "SSL/TLS Issues",
                        description: "Failed to establish secure HTTPS connection.",
                        severity: "critical",
                        recommendation: "Configure valid SSL certificate."
                    });
                }
            }

            // 5. Redirect Behavior
            if (options.checkRedirects) {
                try {
                    const redirectResponse = await axios.head(this.url, { maxRedirects: 10, timeout: 8000 });
                    if (redirectResponse.request._redirectCount > 0) {
                        this.results.push({
                            title: "Redirect Chain Detected",
                            description: `${redirectResponse.request._redirectCount} redirects were followed.`,
                            severity: "medium",
                            recommendation: "Reduce redirect chain length for better performance."
                        });
                    }
                } catch (redirectError) {
                    this.results.push({
                        title: "Redirect Issues",
                        description: "Issues encountered during redirect testing.",
                        severity: "medium",
                        recommendation: "Fix redirect configurations."
                    });
                }
            }

            // 6. XSS Vulnerabilities
            if (options.checkXSS) {
                const xssTestPayload = "<script>alert('XSS')</script>";
                try {
                    const xssResponse = await axios.get(`${this.url}?test=${encodeURIComponent(xssTestPayload)}`, { timeout: 8000 });
                    
                    if (xssResponse.data.includes(xssTestPayload)) {
                        this.results.push({
                            title: "Reflected XSS Vulnerability",
                            description: "The application reflects untrusted input in the response.",
                            severity: "high",
                            recommendation: "Sanitize all user inputs and implement output encoding.",
                            cve: "CVE-2017-5638"
                        });
                    } else {
                        this.results.push({
                            title: "XSS Protection",
                            description: "Application appears to sanitize or encode potentially malicious input.",
                            severity: "low",
                            recommendation: "Continue monitoring for XSS vulnerabilities."
                        });
                    }
                } catch (xssError) {
                    this.results.push({
                        title: "XSS Test Inconclusive",
                        description: "Unable to perform XSS test due to technical issues.",
                        severity: "medium",
                        recommendation: "Manual review recommended."
                    });
                }
            }

            // 7. SQL Injection
            if (options.checkSQLi) {
                const sqlInjectionPayload = "' OR 1=1--";
                try {
                    const sqliResponse = await axios.get(`${this.url}?id=${sqlInjectionPayload}`, { timeout: 8000 });
                    
                    if (sqliResponse.status === 200 && sqliResponse.data.includes("Welcome")) {
                        this.results.push({
                            title: "SQL Injection Vulnerability",
                            description: "The application is vulnerable to SQL injection attacks.",
                            severity: "critical",
                            recommendation: "Use parameterized queries and input validation.",
                            cve: "CVE-2020-1971"
                        });
                    } else {
                        this.results.push({
                            title: "SQL Injection Protection",
                            description: "Application appears resistant to basic SQL injection attempts.",
                            severity: "low",
                            recommendation: "Implement additional layers of protection."
                        });
                    }
                } catch (sqliError) {
                    this.results.push({
                        title: "SQL Injection Test Inconclusive",
                        description: "Unable to perform SQL injection test due to technical issues.",
                        severity: "medium",
                        recommendation: "Manual penetration testing recommended."
                    });
                }
            }

            // 8. Open Redirect
            if (options.checkOpenRedirect) {
                const redirectTestPayload = "https://malicious.example.com";
                try {
                    const redirectResponse = await axios.get(`${this.url}/redirect?url=${redirectTestPayload}`, { timeout: 8000, followRedirect: false });
                    
                    if (redirectResponse.headers.location && redirectResponse.headers.location.includes(redirectTestPayload)) {
                        this.results.push({
                            title: "Open Redirect Vulnerability",
                            description: "The application allows redirection to arbitrary URLs.",
                            severity: "medium",
                            recommendation: "Validate destination URLs before redirecting.",
                            cve: "CVE-2021-26509"
                        });
                    } else {
                        this.results.push({
                            title: "Redirect Validation",
                            description: "Application validates redirected destinations.",
                            severity: "low",
                            recommendation: "Maintain strict URL validation."
                        });
                    }
                } catch (redirectError) {
                    this.results.push({
                        title: "Open Redirect Test Inconclusive",
                        description: "Unable to perform open redirect test due to technical issues.",
                        severity: "medium",
                        recommendation: "Review redirect logic manually."
                    });
                }
            }

            // 9. Cookie Security
            if (options.checkCookies) {
                const cookies = response.headers['set-cookie'] || [];
                
                let secureCookieFound = false;
                let httpOnlyCookieFound = false;
                
                cookies.forEach(cookie => {
                    if (cookie.includes('Secure')) secureCookieFound = true;
                    if (cookie.includes('HttpOnly')) httpOnlyCookieFound = true;
                });
                
                if (!secureCookieFound) {
                    this.results.push({
                        title: "Unsecured Cookies",
                        description: "Cookies are being transmitted over HTTP without Secure flag.",
                        severity: "high",
                        recommendation: "Set Secure flag on all sensitive cookies."
                    });
                }
                
                if (!httpOnlyCookieFound) {
                    this.results.push({
                        title: "Non-HttpOnly Cookies",
                        description: "Cookies are accessible via JavaScript.",
                        severity: "medium",
                        recommendation: "Set HttpOnly flag on sensitive cookies."
                    });
                }
                
                if (secureCookieFound && httpOnlyCookieFound) {
                    this.results.push({
                        title: "Secure Cookie Configuration",
                        description: "Cookies are properly secured with both Secure and HttpOnly flags.",
                        severity: "low",
                        recommendation: "Maintain current cookie security practices."
                    });
                }
            }

            // 10. HSTS
            if (options.checkHSTS) {
                const hstsHeader = response.headers['strict-transport-security'];
                if (!hstsHeader) {
                    this.results.push({
                        title: "Missing HSTS Header",
                        description: "No Strict-Transport-Security header found.",
                        severity: "medium",
                        recommendation: "Implement HSTS to enforce HTTPS connections."
                    });
                } else {
                    this.results.push({
                        title: "HSTS Enabled",
                        description: "Strict-Transport-Security header is configured.",
                        severity: "low",
                        recommendation: "Ensure HSTS includes appropriate max-age directive."
                    });
                }
            }

            // 11. File Upload Vulnerabilities
            if (options.checkFileUpload) {
                const fileUploadForms = $('form[action*="upload"], form[method="post"]')
                    .filter((_, form) => $(form).find('input[type="file"]').length > 0);
                
                if (fileUploadForms.length > 0) {
                    this.results.push({
                        title: "File Upload Functionality Detected",
                        description: "The site contains forms capable of uploading files.",
                        severity: "medium",
                        recommendation: "Ensure proper file validation and sanitization."
                    });
                }
            }

            // 12. Directory Listing
if (options.checkDirectoryListing) {
                const directoryListings = $('a[href$="/"], a[href$="\\"]');
                if (directoryListings.length > 0) {
                    this.results.push({
                        title: "Directory Listing Detected",
                        description: "The server may allow directory listings.",
                        severity: "medium",
                        recommendation: "Disable directory listing in server configuration."
                    });
                }
            }

            // 13. Backup Files
            if (options.checkBackupFiles) {
                const backupExtensions = ['.bak', '.backup', '.orig', '~'];
                const backupFiles = backupExtensions.some(ext => 
                    Object.keys(response.headers).some(header => 
                        header.toLowerCase().includes('filename') && 
                        response.headers[header].toLowerCase().endsWith(ext)
                    )
                );
                
                if (backupFiles) {
                    this.results.push({
                        title: "Backup Files Detected",
                        description: "The server is serving backup files.",
                        severity: "high",
                        recommendation: "Remove backup files from web-accessible directories."
                    });
                }
            }

            // 14. Admin Panels
            if (options.checkAdminPanels) {
                const adminPaths = ['/admin', '/login', '/wp-admin', '/administrator', '/panel'];
                const adminDetected = adminPaths.some(path => 
                    response.data.includes(path) || 
                    window.location.href.includes(path)
                );
                
                if (adminDetected) {
                    this.results.push({
                        title: "Admin Panel Detected",
                        description: "The site contains administrative interfaces.",
                        severity: "medium",
                        recommendation: "Ensure admin panels are properly protected."
                    });
                }
            }

            // 15. API Endpoints
            if (options.checkAPIEndpoints) {
                const apiPatterns = ['/api/', '/rest/', '/v1/', '/v2/'];
                const apiDetected = apiPatterns.some(pattern => 
                    response.data.includes(pattern)
                );
                
                if (apiDetected) {
                    this.results.push({
                        title: "API Endpoints Detected",
                        description: "The site exposes API endpoints.",
                        severity: "low",
                        recommendation: "Ensure APIs have proper authentication and rate limiting."
                    });
                }
            }

            // 16. JWT Token Handling
            if (options.checkJWTToken) {
                const jwtRegex = /eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\.[^\.]+?\.[^\.]+?/;
                const jwtTokens = response.data.match(jwtRegex);
                
                if (jwtTokens && jwtTokens.length > 0) {
                    this.results.push({
                        title: "JWT Tokens Detected",
                        description: "JSON Web Tokens are present in responses.",
                        severity: "medium",
                        recommendation: "Ensure tokens are stored securely and not exposed."
                    });
                }
            }

            // 17. OAuth Implementation
            if (options.checkOAuth) {
                const oauthPatterns = ['oauth', 'openid', 'google-signin'];
                const oauthDetected = oauthPatterns.some(pattern => 
                    response.data.toLowerCase().includes(pattern)
                );
                
                if (oauthDetected) {
                    this.results.push({
                        title: "OAuth Implementation Detected",
                        description: "The site implements OAuth authentication.",
                        severity: "low",
                        recommendation: "Ensure OAuth flows are secure against CSRF and token theft."
                    });
                }
            }

            // 18. SSRF Vulnerabilities
            if (options.checkSSRF) {
                const ssrfTestPayload = "http://localhost";
                try {
                    const ssrfResponse = await axios.get(`${this.url}?url=${ssrfTestPayload}`, { timeout: 8000 });
                    
                    if (ssrfResponse.data.includes("127.0.0.1") || ssrfResponse.data.includes("localhost")) {
                        this.results.push({
                            title: "SSRF Vulnerability Detected",
                            description: "The application is vulnerable to Server-Side Request Forgery.",
                            severity: "high",
                            recommendation: "Validate and restrict target URLs.",
                            cve: "CVE-2021-25941"
                        });
                    }
                } catch (ssrfError) {
                    this.results.push({
                        title: "SSRF Test Inconclusive",
                        description: "Unable to perform SSRF test due to technical issues.",
                        severity: "medium",
                        recommendation: "Manual review recommended."
                    });
                }
            }

            // 19. XXE Vulnerabilities
            if (options.checkXXE) {
                const xxePayload = `<?xml version="1.0"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
<root><value>&xxe;</value></root>`;
                
                try {
                    const xxeResponse = await axios.post(`${this.url}`, xxePayload, {
                        headers: {'Content-Type': 'application/xml'},
                        timeout: 8000
                    });
                    
                    if (xxeResponse.data.includes("root:x")) {
                        this.results.push({
                            title: "XXE Vulnerability Detected",
                            description: "The application is vulnerable to XML External Entity attacks.",
                            severity: "critical",
                            recommendation: "Disable external entities in XML parsers.",
                            cve: "CVE-2017-0785"
                        });
                    }
                } catch (xxeError) {
                    this.results.push({
                        title: "XXE Test Inconclusive",
                        description: "Unable to perform XXE test due to technical issues.",
                        severity: "medium",
                        recommendation: "Manual review recommended."
                    });
                }
            }

            // 20. Remote Code Execution
            if (options.checkRemoteCodeExec) {
                const rcePayload = "; ls -la;";
                try {
                    const rceResponse = await axios.get(`${this.url}?cmd=${rcePayload}`, { timeout: 8000 });
                    
                    if (rceResponse.data.includes("total ")) {
                        this.results.push({
                            title: "Remote Code Execution Vulnerability",
                            description: "The application is vulnerable to command injection.",
                            severity: "critical",
                            recommendation: "Use safe APIs and validate all inputs.",
                            cve: "CVE-2021-44228"
                        });
                    }
                } catch (rceError) {
                    this.results.push({
                        title: "RCE Test Inconclusive",
                        description: "Unable to perform RCE test due to technical issues.",
                        severity: "medium",
                        recommendation: "Manual penetration testing recommended."
                    });
                }
            }

            // 21. Deserialization Vulnerabilities
            if (options.checkDeserialization) {
                const javaSerialPayload = "ysoserial";
                try {
                    const deserializationResponse = await axios.get(`${this.url}?obj=${javaSerialPayload}`, { timeout: 8000 });
                    
                    if (deserializationResponse.data.includes("ysoserial")) {
                        this.results.push({
                            title: "Deserialization Vulnerability",
                            description: "The application is vulnerable to unsafe deserialization.",
                            severity: "high",
                            recommendation: "Avoid unsafe serialization mechanisms.",
                            cve: "CVE-2015-7501"
                        });
                    }
                } catch (deserializationError) {
                    this.results.push({
                        title: "Deserialization Test Inconclusive",
                        description: "Unable to perform deserialization test due to technical issues.",
                        severity: "medium",
                        recommendation: "Manual review recommended."
                    });
                }
            }

            // 22. Clickjacking
            if (options.checkClickjacking) {
                const framebusterScript = `
                    <script>
                        if (window.top !== window.self) {
                            window.document.write('<h1>You cannot access this page inside an iframe.</h1>');
                        }
                    </script>
                `;
                
                try {
                    const clickjackingResponse = await axios.get(`${this.url}`, { timeout: 8000 });
                    const hasFramebuster = clickjackingResponse.data.includes(framebusterScript);
                    
                    if (!hasFramebuster) {
                        this.results.push({
                            title: "Clickjacking Vulnerability",
                            description: "The site is vulnerable to clickjacking attacks.",
                            severity: "medium",
                            recommendation: "Implement frame busting scripts and X-Frame-Options headers."
                        });
                    }
                } catch (clickjackingError) {
                    this.results.push({
                        title: "Clickjacking Test Inconclusive",
                        description: "Unable to perform clickjacking test due to technical issues.",
                        severity: "medium",
                        recommendation: "Manual review recommended."
                    });
                }
            }

            // 23. Security Misconfigurations
            if (options.checkSecurityMisconfiguration) {
                const misconfigurations = [];
                
                if (!response.headers['x-content-type-options']) {
                    misconfigurations.push("Missing X-Content-Type-Options");
                }
                
                if (!response.headers['x-frame-options']) {
                    misconfigurations.push("Missing X-Frame-Options");
                }
                
                if (!response.headers['referrer-policy']) {
                    misconfigurations.push("Missing Referrer-Policy");
                }
                
                if (misconfigurations.length > 0) {
                    this.results.push({
                        title: "Security Misconfigurations Detected",
                        description: `The following headers are missing: ${misconfigurations.join(', ')}.`,
                        severity: "medium",
                        recommendation: "Add missing security headers to protect against various attacks."
                    });
                }
            }

            // 24. Insecure Direct Object References
            if (options.checkInsecureDirectObjectReference) {
                const idParams = ['id', 'user_id', 'account_id', 'product_id'];
                const idParamUsed = idParams.some(param => 
                    response.data.includes(`param="${param}"`) ||
                    response.data.includes(`name="${param}"`)
                );
                
                if (idParamUsed) {
                    this.results.push({
                        title: "Insecure Direct Object Reference Detected",
                        description: "Parameters that could reference objects directly are used.",
                        severity: "medium",
                        recommendation: "Implement proper authorization checks."
                    });
                }
            }

            // 25. Broken Access Control
            if (options.checkBrokenAccessControl) {
                const adminRoutes = ['/admin', '/dashboard', '/manage', '/control'];
                const adminRouteAccessible = adminRoutes.some(route => 
                    response.data.includes(route)
                );
                
                if (adminRouteAccessible) {
                    this.results.push({
                        title: "Broken Access Control Detected",
                        description: "Admin routes appear to be accessible without proper authorization.",
                        severity: "high",
                        recommendation: "Implement role-based access control."
                    });
                }
            }

            // 26. Sensitive Data Exposure
            if (options.checkSensitiveDataExposure) {
                const sensitivePatterns = [
                    /\b(password|pass|pwd|secret|token|key|apikey)\b/i,
                    /[a-f0-9]{32,}/, // MD5 hashes
                    /[a-f0-9]{40,}/, // SHA-1 hashes
                    /[a-f0-9]{64,}/  // SHA-256 hashes
                ];
                
                const sensitiveDataFound = sensitivePatterns.some(pattern => 
                    response.data.match(pattern)
                );
                
                if (sensitiveDataFound) {
                    this.results.push({
                        title: "Sensitive Data Exposure Detected",
                        description: "Potentially sensitive information is exposed in responses.",
                        severity: "high",
                        recommendation: "Mask or remove sensitive data from responses."
                    });
                }
            }

            // 27. Components with Known Vulnerabilities
            if (options.checkComponentsWithKnownVulnerabilities) {
                const jsLibraries = ['jquery', 'react', 'vue', 'angular', 'bootstrap'];
                const librariesFound = jsLibraries.filter(lib => 
                    response.data.includes(lib)
                );
                
                if (librariesFound.length > 0) {
                    this.results.push({
                        title: "JavaScript Libraries Detected",
                        description: `The site uses potentially vulnerable libraries: ${librariesFound.join(', ')}.`,
                        severity: "medium",
                        recommendation: "Keep libraries updated and monitor for known vulnerabilities."
                    });
                }
            }
        }

        module.exports = VulnerabilityScanner;
